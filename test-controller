#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h> // Library for JSON parsing

// WiFi credentials
const char* ssid = "Usama";        // Replace with your WiFi SSID
const char* password = "QaUh3734"; // Replace with your WiFi password

// API URL
const char* apiUrl = "https://hardware-store-java-89ddc23c99ed.herokuapp.com/api/open/v1/auth/test/hello";

// Pin definitions
const int buttonPin = 2;  // GPIO for the button (use raw pin numbers)
const int ledPin = 13;    // GPIO for the LED (use raw pin numbers)

// Variables
bool buttonPressed = false;

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Configure pin modes
  pinMode(buttonPin, INPUT_PULLUP); // Button with pull-up resistor
  pinMode(ledPin, OUTPUT);          // LED as output
  digitalWrite(ledPin, LOW);        // Ensure LED is off initially

  // Connect to WiFi
  Serial.print("Connecting to WiFi...");
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" Connected!");
}

void loop() {
  // Check if button is pressed
  if (digitalRead(buttonPin) == LOW && !buttonPressed) {
    buttonPressed = true; // Prevent multiple triggers for the same press

    Serial.println("Button pressed, sending API request...");
    if (sendApiRequest()) {
      Serial.println("ResponseCode = 1 received. Turning on LED...");
      digitalWrite(ledPin, HIGH); // Turn on LED
      delay(1000);               // Wait for 1 second
      digitalWrite(ledPin, LOW); // Turn off LED
    } else {
      Serial.println("ResponseCode != 1. No LED action.");
    }
  }

  // Reset button state when released
  if (digitalRead(buttonPin) == HIGH) {
    buttonPressed = false;
  }
}

bool sendApiRequest() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected!");
    return false;
  }

  // HTTP POST request
  WiFiClient client;          // Create a WiFiClient object
  HTTPClient http;            // Create an HTTPClient object
  http.begin(client, apiUrl); // Use the new ::begin(WiFiClient, url) method
  http.addHeader("Content-Type", "application/json"); // Add JSON header
  String jsonPayload = "{}";           // Sending an empty JSON payload
  int httpResponseCode = http.POST(jsonPayload);

  if (httpResponseCode > 0) {
    // Parse the JSON response
    String response = http.getString();
    Serial.print("HTTP Response Code: ");
    Serial.println(httpResponseCode);
    Serial.print("Response: ");
    Serial.println(response);

    StaticJsonDocument<256> doc;
    DeserializationError error = deserializeJson(doc, response);

    if (error) {
      Serial.print("JSON Parsing failed: ");
      Serial.println(error.c_str());
      return false;
    }

    // Extract the responseCode
    int responseCode = doc["responseCode"];
    Serial.print("Response Code: ");
    Serial.println(responseCode);

    // Check if responseCode is 1
    if (responseCode == 1) {
      return true; // Success
    }
  } else {
    Serial.print("HTTP POST failed, error: ");
    Serial.println(http.errorToString(httpResponseCode));
  }

  http.end(); // End the HTTP connection
  return false;
}
