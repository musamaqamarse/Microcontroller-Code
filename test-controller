#include <Senses_wifi.h>
#include <ArduinoJson.h> // Include ArduinoJson library for JSON parsing

// WiFi credentials
const char* ssid = "Usama";        // Replace with your WiFi SSID
const char* password = "QaUh3734"; // Replace with your WiFi password

// API URL
const char* apiUrl = "https://hardware-store-java-89ddc23c99ed.herokuapp.com/api/open/v1/auth/test/hello";

// Pin definitions
const int buttonPin = D2;  // GPIO for the button
const int ledPin = D13;    // GPIO for the LED

// Variables
bool buttonPressed = false;

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);

  // Configure pin modes
  pinMode(buttonPin, INPUT_PULLUP); // Button with pull-up resistor
  pinMode(ledPin, OUTPUT);          // LED as output
  digitalWrite(ledPin, LOW);        // Ensure LED is off initially

  // Connect to WiFi using Senses_wifi
  Serial.print("Connecting to WiFi...");
  Senses_wifi.begin(ssid, password);

  while (!Senses_wifi.isConnected()) {
    delay(500);
    Serial.print(".");
  }
  Serial.println(" Connected!");
}

void loop() {
  // Check if button is pressed
  if (digitalRead(buttonPin) == LOW && !buttonPressed) {
    buttonPressed = true; // Prevent multiple triggers for the same press

    Serial.println("Button pressed, sending API request...");
    if (sendApiRequest()) {
      Serial.println("ResponseCode = 1 received. Turning on LED...");
      digitalWrite(ledPin, HIGH); // Turn on LED
      delay(1000);               // Wait for 1 second
      digitalWrite(ledPin, LOW); // Turn off LED
    } else {
      Serial.println("ResponseCode != 1. No LED action.");
    }
  }

  // Reset button state when released
  if (digitalRead(buttonPin) == HIGH) {
    buttonPressed = false;
  }
}

bool sendApiRequest() {
  if (!Senses_wifi.isConnected()) {
    Serial.println("WiFi not connected!");
    return false;
  }

  // Create a POST request with Senses_wifi
  String jsonPayload = "{}"; // Sending an empty JSON payload
  String response = Senses_wifi.post(apiUrl, jsonPayload);

  if (response.isEmpty()) {
    Serial.println("No response received!");
    return false;
  }

  // Parse the JSON response using ArduinoJson
  StaticJsonDocument<256> doc;
  DeserializationError error = deserializeJson(doc, response);

  if (error) {
    Serial.print("JSON Parsing failed: ");
    Serial.println(error.c_str());
    return false;
  }

  // Extract the responseCode
  int responseCode = doc["responseCode"];
  Serial.print("Response Code: ");
  Serial.println(responseCode);

  // Check if responseCode is 1
  if (responseCode == 1) {
    return true; // Success
  } else {
    return false; // Error
  }
}
